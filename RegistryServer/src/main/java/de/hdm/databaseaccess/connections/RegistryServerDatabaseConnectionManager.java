/*******************************************************************************
 * Copyright 2016-2018 Research group REMEX, Hochschule der Medien (Stuttgart, Germany)
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/
package de.hdm.databaseaccess.connections;

import org.apache.tomcat.jdbc.pool.DataSource;
import org.apache.tomcat.jdbc.pool.PoolProperties;

import de.hdm.configuration.MyProperties;

/**
 * This class manages the database connections for the registry server. It is implemented as singleton to ensure, that
 * there is only one instance, which manages the database connections, at runtime.
 * 
 * This class is thread safe.
 * 
 * @author Tobias Ableitner
 *
 */
public class RegistryServerDatabaseConnectionManager extends DatabaseConnectionManager {

	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************
	// attributes
	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************




	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************
	// constructors
	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************

	/**
	 * Private constructor, because this class is implemented as singleton.
	 */
	private RegistryServerDatabaseConnectionManager() {
		super(new DataSource());
		PoolProperties properties = new PoolProperties();
		properties.setUrl(MyProperties.getRegistryDatabaseUrl());
		properties.setDriverClassName(MyProperties.getRegistryDatabaseDriverClassName());
		properties.setUsername(MyProperties.getRegistryDatabaseUserName());
		properties.setPassword(MyProperties.getRegistryDatabasePassword());
		properties.setMaxActive(MyProperties.getRegistryDatabaseMaxActiveConnections());
		properties.setMaxIdle(MyProperties.getRegistryDatabaseMaxIdleConnections());
		this.getDataSource().setPoolProperties(properties);
	}




	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************
	// getters and setters
	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************




	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************
	// abstract methods
	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************




	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************
	// override methods
	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************

	/**
	 * Get instance of this class.
	 * 
	 * @return instance of this class
	 */
	public static synchronized IDatabaseConnectionManager getInstance() {
		if (instance == null) {
			instance = new RegistryServerDatabaseConnectionManager();
		}
		return instance;
	}




	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************
	// public methods
	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************




	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************
	// protected methods
	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************




	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************
	// private methods
	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************




	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************
	// inner classes
	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************

}
