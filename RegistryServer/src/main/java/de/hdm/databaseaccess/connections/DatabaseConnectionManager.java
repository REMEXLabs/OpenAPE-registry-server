/*******************************************************************************
 * Copyright 2016-2018 Research group REMEX, Hochschule der Medien (Stuttgart, Germany)
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/
package de.hdm.databaseaccess.connections;

import java.sql.Connection;
import java.sql.SQLException;

import org.apache.tomcat.jdbc.pool.DataSource;

import de.hdm.helpers.Checker;

/**
 * This class manages database connections.
 * 
 * This class is thread safe.
 * 
 * @author Tobias Ableitner
 *
 */
public class DatabaseConnectionManager implements IDatabaseConnectionManager {

	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************
	// attributes
	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************
	
	/**
	 * The instance of the database connection manager.
	 */
	protected static DatabaseConnectionManager instance;
	
	/**
	 * The data source.
	 */
	private DataSource dataSource;



	
	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************
	// constructors
	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************

	/**
	 * Creates a new {@link DatabaseConnectionManager}.
	 * @param dataSource the data source. It must not be null. Otherwise an {@link IllegalArgumentException} will be thrown.
	 * @throws IllegalArgumentException if the parameter dataSource is null.
	 */
	protected DatabaseConnectionManager(DataSource dataSource) {
		this.setDataSource(dataSource);
	}

	
	

	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************
	// getters and setters
	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************

	/**
	 * Getter for the data source.
	 * @return the data source.
	 */
	protected DataSource getDataSource() {
		return this.dataSource;
	}

	private void setDataSource(DataSource dataSource) {
		Checker.checkNull(dataSource, "dataSource");
		this.dataSource = dataSource;
	}
	


	
	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************
	// abstract methods
	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************

	
	

	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************
	// override methods
	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************

	/*
	 * (non-Javadoc)
	 * @see de.hdm.databaseaccess.connections.IDatabaseConnectionManager#getConnection()
	 */
	@Override
	public synchronized Connection getConnection() {
		Connection connection = null;
		try{
			connection = this.getDataSource().getConnection();
		}catch(SQLException e){
			e.printStackTrace();
		}
		return connection;
	}

	
	

	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************
	// public methods
	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************




	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************
	// protected methods
	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************




	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************
	// private methods
	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************




	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************
	// inner classes
	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************

}
