/*******************************************************************************
 * Copyright 2016-2018 Research group REMEX, Hochschule der Medien (Stuttgart, Germany)
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/
package de.hdm.databaseaccess;

import java.sql.Connection;
import java.sql.SQLException;

import de.hdm.helpers.Checker;

/**
 * This class contains the MySQL specific stuff of an {@link UnitOfWork}.
 * 
 * This class is not thread safe.
 * 
 * @author Tobias Ableitner
 *
 */
public class MySqlUnitOfWork extends UnitOfWork {

	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************
	// attributes
	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************

	/**
	 * Connection to the MySQL database.
	 */
	private Connection connection;
	
	


	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************
	// constructors
	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************
	
	/**
	 * Creates a new {@link UnitOfWork}.
	 * @param databaseName name of the database, for which this unit of work is created. It must not be null or empty. Otherwise an {@link IllegalArgumentException} will be thrown.
	 * @param connection the connection to the MySQL database
	 */
	public MySqlUnitOfWork(String databaseName, Connection connection){
		super(databaseName);
		this.setConnection(connection);
	}




	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************
	// getters and setters
	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************

	/**
	 * Getter for the connection to the MySQL database.
	 * @return connection to the MySQL database
	 */
	public Connection getConnection() {
		return this.connection;
	}

	private void setConnection(Connection connection) {
		Checker.checkNull(connection, "connection");
		this.connection = connection;
	}

	


	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************
	// abstract methods
	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************

	
	

	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************
	// override methods
	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************

	/*
	 * (non-Javadoc)
	 * @see de.hdm.databaseaccess.UnitOfWork#startDatabaseSpecificImplementation()
	 */
	@Override
	protected void startDatabaseSpecificImplementation() throws DataAccessException{
		try {
			this.connection.setAutoCommit(false);
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DataAccessException("Could not start unit of work on account of a problem with the database!", e);
		}
	}

	/*
	 * (non-Javadoc)
	 * @see de.hdm.databaseaccess.UnitOfWork#abortDatabaseSpecificImplementation()
	 */
	@Override
	protected void abortDatabaseSpecificImplementation() throws DataAccessException{
		try {
			this.connection.rollback();
			this.connection.close();
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DataAccessException("Could not abort unit of work on account of a problem with the database!", e);
		}
	}

	/*
	 * (non-Javadoc)
	 * @see de.hdm.databaseaccess.UnitOfWork#finishDatabaseSpecificImplementation()
	 */
	@Override
	protected void finishDatabaseSpecificImplementation() throws DataAccessException{
		try {
			this.connection.setAutoCommit(true);
			this.connection.close();
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DataAccessException("Could not finish unit of work on account of a problem with the database!", e);
		}
	}


	
	
	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************
	// public methods
	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************




	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************
	// protected methods
	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************




	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************
	// private methods
	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************




	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************
	// inner classes
	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************

}
