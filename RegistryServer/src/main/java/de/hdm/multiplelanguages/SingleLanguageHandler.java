/*******************************************************************************
 * Copyright 2016-2018 Research group REMEX, Hochschule der Medien (Stuttgart, Germany)
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/
package de.hdm.multiplelanguages;
import java.util.ResourceBundle;

import de.hdm.helpers.Checker;

/**
 * This class is responsible for one language of the multiple language support. Therefore it uses the Java language property
 * files. The default language is English. Thus if the translation of a word in an unsupported language is requested,
 * the English version will be returned.
 * @author Tobias Ableitner
 *
 */
public class SingleLanguageHandler {

	//***********************************************************************************************************************************************
	//*********************************************************************************************************************************************
	// attributes
	//*********************************************************************************************************************************************
	//*********************************************************************************************************************************************
	
	/**
	 * Translations of the words in one language. In other words, the content of one language property file.
	 */
	private ResourceBundle translation;
	
	
	
	
	//*********************************************************************************************************************************************
	//*********************************************************************************************************************************************
	// constructors
	//*********************************************************************************************************************************************
	//*********************************************************************************************************************************************
	
	/**
	 * Creates a new {@link SingleLanguageHandler}.
	 * @param translation the translations for one language
	 * @throws #NullPointerException if translation is null
	 */
	public SingleLanguageHandler(ResourceBundle translation){
		this.setTranslation(translation);
	}
	
	
	
	
	//*********************************************************************************************************************************************
	//*********************************************************************************************************************************************
	// getters and setters
	//*********************************************************************************************************************************************
	//*********************************************************************************************************************************************
	
	/**
	 * Setter for {@link #translation}.
	 * @param translation the translations for one language
	 * @throws #NullPointerException if translation is null
	 */
	private void setTranslation(ResourceBundle translation){
		Checker.checkNull(translation, "translation");
		this.translation = translation;
	}
	
	
	
	
	//*********************************************************************************************************************************************
	//*********************************************************************************************************************************************
	// override methods
	//*********************************************************************************************************************************************
	//*********************************************************************************************************************************************
		
	
	
	
	//*********************************************************************************************************************************************
	//*********************************************************************************************************************************************
	// public methods
	//*********************************************************************************************************************************************
	//*********************************************************************************************************************************************
	
	/**
	 * Returns the word belongig to the key in a preferred language. If it is not available in the preferred language it
	 * will be returned in the default language. the application.
	 * 
	 * @param key
	 *            the key of the word
	 * @return searched word in the preferred or default language
	 */
	public String getWord(String key) {
		Checker.checkNullAndEmptiness(key, "key");
		String word = this.translation.getString(key);
		return word;
	}
	
	
	
	
	//*********************************************************************************************************************************************
	//*********************************************************************************************************************************************
	// protected methods
	//*********************************************************************************************************************************************
	//*********************************************************************************************************************************************
		
	
	
	
	//*********************************************************************************************************************************************
	//*********************************************************************************************************************************************
	// private methods
	//*********************************************************************************************************************************************
	//*********************************************************************************************************************************************
	
	
	
	
	//*********************************************************************************************************************************************
	//*********************************************************************************************************************************************
	// inner classes
	//*********************************************************************************************************************************************
	//*********************************************************************************************************************************************
		
	
	
}
